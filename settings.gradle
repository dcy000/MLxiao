def initGradleEnvironment() {
    println "initialize Gradle Environment...."
    def proFile = file(rootDir.getAbsolutePath() + "/config.properties")
    Properties p = new Properties()
    proFile.withInputStream { stream ->
        p.load(new InputStreamReader(stream, "UTF-8"))
    }
    // 编译配置
    gradle.ext.buildToolsVersion = p.buildToolsVersion
    gradle.ext.compileSdkVersion = Integer.valueOf(p.compileSdkVersion)
    gradle.ext.minSdkVersion = Integer.valueOf(p.minSdkVersion)
    gradle.ext.targetSdkVersion = Integer.valueOf(p.targetSdkVersion)
    gradle.ext.supportVersion = p.supportVersion

    // 打包配置
    gradle.ext.appVersionCode = Integer.valueOf(p.appVersionCode)
    gradle.ext.appVersionName = p.appVersionName
    int versionType = Integer.valueOf(p.appVersionType)
    gradle.ext.appVersionType = versionType
    gradle.ext.appEncrypt = Boolean.parseBoolean(p.encrypt)
    gradle.ext.logging = p.logging
    def urls
    if (versionType == 0) {
        urls = p.developUrls.split(";")
    } else if (versionType == 1) {
        urls = p.testUrls.split(";")
    } else if (versionType == 2) {
        urls = p.releaseUrls.split(";")
    }
    gradle.ext.serviceUrl = urls[0]
    gradle.ext.searchUrl = urls[1]
    gradle.ext.packageDir = p.packageDir
    def channels = p.packageChannels
    if (channels == "all") {
        gradle.ext.packageChannels = p.allChannelList.split(";")
    } else {
        gradle.ext.packageChannels = channels.split(";")
    }
    println "initialize Gradle Environment completes..."
}
initGradleEnvironment()

include ':app', ':sdk', ':module-edu', ':lib-music-player', ':circleprogress', ':wkvideoplayer', ':lib-rulerview', ':lib-video-player', ':lib-zxing', ':voice',':module_hykd', ':lib-common'
include ':expand-textview-library'
include ':circleindicator'


