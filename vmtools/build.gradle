apply plugin: 'com.android.library'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"

    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    // Android Material design 设计风格库，包含了support-v4, appcomat-v7, recyclerView扩展库
    compile 'com.android.support:design:25.3.1'
    // 卡片风格扩展库
    compile 'com.android.support:cardview-v7:25.3.1'

    // 解决方法数超过65536问题扩展库
    compile 'com.android.support:multidex:1.0.1'

    // LeakCanary Debug库，开源捕获内存溢出的库
    compile 'com.squareup.leakcanary:leakcanary-android:1.5'
    // LeakCanary 发版的库
    //    compile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'

    // 这里在 tools 中引入外部库是为了统一管理，以后的项目只需要引入这个 tools
    // 订阅方式实现事件通知；代替 Handler 和广播
    compile 'org.greenrobot:eventbus:3.0.0'
}


// 这行表示如果你已经打过一次包了，再进行打包则把原来的包删掉
task clearJar(type: Delete) {
    delete 'build/libs/vmtools.jar'
}

task makeJar(type: Copy) {
    // 这行表示要打包的文件的路径，根据下面的内容，其实是该路径下的 classes.jar
    from('build/intermediates/bundles/release/')
    // 这行表示打包完毕后包的生成路径，也就是生成的包存在哪
    into('build/libs/')
    // 看到这行，如果你对分包有了解的话，你就可以看出来这行它只是将一些类打包了
    include('classes.jar')
    rename('classes.jar', 'vmtools.jar')
}

makeJar.dependsOn(clearJar, build)