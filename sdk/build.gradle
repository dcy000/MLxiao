apply plugin: 'com.android.library'

android {
    signingConfigs {
        config {
        }
    }
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    compileSdkVersion rootProject.ext.android.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode 34
        versionName "2.9.4"
    }

    //对于import module方式，compileOptions可以直接删掉
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    testOptions {
//        unitTests.returnDefaultValues = true
    }
    lintOptions {
        abortOnError false
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation rootProject.ext.dependencies["appcompat-v7"]
    implementation rootProject.ext.dependencies["gson"]
    implementation 'com.google.zxing:core:3.3.0'

    // 注意：因为微信SDK从4.0.2版本开始已改用gradle形式，后续Android开发工具包将不再更新，请开发者尽快改用gradle方式编译、更新微信SDK
    implementation 'com.tencent.mm.opensdk:wechat-sdk-android-with-mta:1.1.6'

    /*  以下标识
    //ali
    libs/alipaySdk-xxx.jar.jar

    //union pay
    libs/UPPayAssistEx.jar
    libs/UPPayPluginEx.jar

    //baidu
    Cashier_SDK-v4.2.0.jar
    */

    //用于paypal
    implementation 'com.paypal.sdk:paypal-android-sdk:2.13.3'
    //网络请求库
    implementation rootProject.ext.dependencies["okhttp3"]

    testImplementation rootProject.ext.dependencies["junit"]
    testImplementation "org.mockito:mockito-core:1.10.8"
    testImplementation('org.powermock:powermock-api-mockito:1.6.6') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
    testImplementation('org.powermock:powermock-module-junit4:1.6.6') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

//以下用于生成sdk jar
//gradle makeJar
task clearJar(type: Delete) {
    delete fileTree(dir: 'build/libs', include: 'beecloud*.jar')
}

task makeJar(type: org.gradle.api.tasks.bundling.Jar) {
    //指定生成的jar名
    baseName 'beecloud-2.9.4'
    //从哪里打包class文件
    from('build/intermediates/classes/release/cn/beecloud')
    //打包到jar后的目录结构
    into('cn/beecloud')
    //去掉不需要打包的目录和文件
    exclude('test/', 'BuildConfig.class', 'R.class')
    //去掉R$开头的文件
    exclude { it.name.startsWith('R$') }
}

makeJar.dependsOn(clearJar, build)

//以下用于生成javadoc
//gradle generateReleaseJavaDoc --info
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        //title = "$name $version API"
        doFirst {
            title = "BeeCloud Android SDK API"
            description "Generates Javadoc for $variant.name."
            source = variant.javaCompile.source
            classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        }
        options {
            encoding 'UTF-8'
            charSet 'UTF-8'
            links "http://docs.oracle.com/javase/8/docs/api/"
            linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
        }
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}
